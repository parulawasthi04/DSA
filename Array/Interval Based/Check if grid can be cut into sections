class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>>vec;
        sort(intervals.begin(),intervals.end());
        int st = intervals[0][0];
        int en = intervals[0][1];
        for(int i = 1; i < intervals.size(); i++){
            if(en > intervals[i][0]){
                st = min(intervals[i][0],st);
                en = max(intervals[i][1],en);
            }
            else{
                vec.push_back({st,en});
                st = intervals[i][0];
                en = intervals[i][1];
            }
        }
        vec.push_back({st,en});
        return vec;
    }
    bool checkValidCuts(int n, vector<vector<int>>& rectangles) {
        vector<vector<int>>vecX;
        vector<vector<int>>vecY;
        for(int i = 0; i < rectangles.size(); i++){
            vecX.push_back({rectangles[i][0],rectangles[i][2]});
            vecY.push_back({rectangles[i][1],rectangles[i][3]});
        }
        vector<vector<int>>result1;
        vector<vector<int>>result2;
        result1 = merge(vecX);
        result2 = merge(vecY);
        if(result1.size() >= 3 || result2.size() >= 3){
            return true;
        }
        return false;
    }
};
